// Alec
// ------------------------------------------

SP1 (Start - Oct 7)
- 3hr resesarching libraries for editor/compilation/running
- 2hr implementing ace editor prototype
- 4hr implementing ace editor + hackerearth api prototype
- 1hr figuring out specs
-
SP2
- 1hr implement revealing prototype module js pattern
- 3hr implement base module with compilation/running
- 2hr integrate language support ace

- 2hr implementing basic tab functionality

SP3
- 2hr implement delete tab functionality
- 1hr implement lang saving between tab switch
- 2hr setting up jasmine annd jasmine-jquery
- 2hr code cleanup of editor.js ui.js, and editorSpec finished
- 3hr specs for execute, main, ui.js files

SP4
- 1hr debug CORS issue for HackerEarthAPI
- 1hr research alternatives to hacker earth api
- 1hr resesarch documentation and capabilities of repl.it
- 2hr rework code editor UI
- 2hr update spec files
- 1hr github maintenance - issues, logs, documentations

SP5
- 3hr implement base functionality for api calls
- 3hr implement repl.it API to replace hackerearth api
- 1hr manual regression testing after repl.it implementation
- 2hr debugging and fixing existing specs to work with new ui and api
- 8hr integration with Stephen's API
- 3hr testing and debugging api implementation
- 4hr further api implementation
- 2hr updating test specs
- 2hr project management for submission
- 1hr documentation

// Justin
SP1
- ~13 hours
- learning jquery + research
- figuring out specs
- adding bindings
- language change functionality
- theme change functionality
- UI cleanup/styling
SP2
~10 hours
- error handling
- testing language compilation
- testing language run
- testing error returns from HackerEarth API
SP3
- ~14 hours
- setting up jasmine/ & karma
- util spec finished
- research how to make dummy callback response
- execute spec, intermediate work
- research ajax testing
- implement mock ajax
SP4
- ~25 hours
- begin modelling automatic error searching
- continue error translation and styling
- integration with goldenLayout
- merge with gh pages
- refitting execute.js for using repl.it instead of HackerEarth API
- researching repl.it barebones documentation
- restyling outputs to fit repl model
- Error handling for javascript specifically and all languages in general
- Hello world test for all langs
- Automatic error searching for JS
SP5
- ~44 hours so far
- Testing and error handling for all languages
- Testing integration with stack overflow and YouTube modules
- Research into common errors in all languages
- Refactoring javascript in execution and utility portion of code editor
- Adding timeout to codde execution
- Work on design document
- Writing snippet and api specs
- re-writing specs for execution and utility
// Stephen
SP 1 total: 15 hours
Platform Design
	Choose and setup Cloud Architecture: 7 hours
	Choose and setup Backend Stack: 8 hours

SP 2 total: 15 hours
Platform Design
	Implement RESTful API: 10 hours
DB Design
	Setup Cassandra cluster: 5 hours

SP 3 total: 54 hours
Platform Design
	Secure the API (authentication & authorization): 6 hours
	Unit test the API functions: 20 hours
	Deploy the API: 10 hours
DB Design
	Create data access objects (model classes): 15 hours
Facebook Login Integration
	Create App and Research How-To: 2 hours
	Static Implementation (non-integrated): 1 hour

SP 4 total: 25 hours
Platform Design
	Further flesh out unit tests for API functions: 15 hours
	Debugging major EC2 deployment issues: 10 hours

SP 5 total: 47 hours
Platform Design
	Debug major showstopping issue with broken Maven dependencies: 10 hours
	Implement snippets API functions: 10 hours
	Unit test snippets API functions and deploy to EC2: 6 hours
	Code cleanup: 2 hours
	Extend snippet operations with list by user: 2 hour
	Extend snippet operations with update: 6 hours
	Unit test new operations: 3 hours
DB Design
	Implement snippets resource: 6 hours
Site Reliability
	Monitor production EC2 instance, resolve outages: 2 hours

// Yue (Mark)
SP1 ~12hrs
- research possible UI frameworks
- research GoldenLayout api and docs
- setup initial GoldenLayout template
- specs and requirements doc

SP2 ~9hrs
- research GoldenLayout saving states
- GoldenLayout settings
- integrate component mocks into GoldenLayout
- research YouTube api

SP3 ~15hrs
- testing YouTube requests and responses
- initial code to test YouTube functionality
- getting video descriptions from YouTube api
- back functionality for YouTube
- research MVC implementation for YouTube

SP4 ~22hrs
- restructure files to separate components
- revamp YouTube UI
- manual testing of YouTube UI and functionality
- debug issues with YouTube functionality
- fix video responsiveness
- research testing frameworks for YouTube component

SP5 ~25hrs
- initial setup of jasmine tests for YouTube
- initial test cases for YouTube model
- test cases to YouTube's controller and view
- design and testing doc
- merge YouTubeKarma.conf into karma.conf
- debug and fix GoldenLayout UI issues
- gapi loading in jasmine
- updating test cases
- documenting YouTube component

// Aviral
// ------------------------------------------
SP1 ~13hrs
- research (UI) 
---- research GoldenLayout api and docs
- specs and requirements doc

SP2 ~9hrs
- implement GoldenLayout 
- research YouTube api
- github issue tracking

SP3 ~58hrs
- implement YouTube
---- getting video descriptions from YouTube api
---- back functionality for YouTube
- added support for landing page
- integrating codeEditor and stackOverflow in goldenlayout 
- github issue tracking
- added Nav bar (on top) for the website

SP4 ~47hrs
- restructure files to separate components
- revamp YouTube UI
- testing of YouTube
- github issue tracking

SP5 ~19hrs
- refactoring code
- Created a separate component for codeeditor's output
- initial setup of jasmine tests for YouTube
- initial test cases for YouTube model
- test cases to YouTube's controller and view
- addition of async support in testing youtube
- research for login in localStorage
- debug and fix GoldenLayout UI issues
- gapi loading in jasmine
- github issue tracking

// Tushar
SP 1 ~12hr
- Preliminary research to find ace editor api for code-editor module
- Researching GoldenLayout framework to allow multiple window display
- Making UI mockups on Balsamiq showing Multiwindow display.
- wrote specs and requirements for Docs.

SP 2 ~ 32hrs
- Learned HTML CSS on codeacademy.
- Learning Bootstrap and practicing its grid layout.
- Designed landing page mockup on balsamiq.
- Designed and coded landing page using bootstrap.
  - Researching unique fonts
  - Playing around with different layouts for the page.
  - Researching branding laws for using YouTube, stackoverflow logos.
  - Researching Typer.js script for animated text.
  - Reseaching different Monitor pics.
- Designed the login form for the page.
- Writing vison and requirements for the docs.

SP 3 ~8-9hrs
- Testing stackoverflow requests and responses.
- Adding Styling to the stackoverflow module.
- Writing test cases for Stackoverflow.

SP 4 ~ 12-13hrs
- Reconfigures Node.js to run the app locally.
- Researched the anwers api function for stackOverflow.
- Implemented get answers function for stackoverflow module using their api.
- Styled the question listings for stackoverflow.
- Learned jquery for dynamically displaying and hiding answers to the questions.

SP 5 ~ 15hrs
- Researching different UI options for the Saved snippets fucntionality.
- Trying to re-layout the GoldenLayout to add a Side Bar for saved snippets but failing
   to successfully implemnt it.
- Pivoting to adding the Saved Snippets UI to the navbar as a simple dropdown list instead.
- Styling and resizing the Navbar.
- Added styling to Stackoveflow and YouTube search bars.
- Changed color of the titles for Goldenlayout modules.


// Andrew
SP 1 total: ~15 hours
- learned about Golden Layout framework
- designed a mock-up page
- researched Stack Exchange API (Stackoverflow integration)
- wrote specifications and critical features of Codepal

SP 2 total: ~15 hours
- designed Stackoverflow UI
- designed coding pattern and algorithm
- made a simple static page of Stackoverflow for testing
- documented features of Stackoverflow module

SP 3 total: ~25 hours
- integrated Stack Exchange API
- tested Stackoverflow module by sending requests
- added some stylings
- designed test cases (and use cases) and added to documents
- integrated Stackoverflow module into Goldden Layout
- improved GUI of Stackoverflow module

SP4 total: ~25 hours
- researched FB login and Codepal API
- designed username prompt pop-up for the home page
- implemented FB login functionality on the client side
- sent requests to back-end server to verify users' identities
- stored userIds and accesstokens on localStorage for future logins (unstable)
- redirected users to the main page upon successful logins

SP5 total: ~22 hours
- learned about Jasmine and Karma for unit testing
- refactored code for Stackoverflow module
- filtered with more accurate results returned by Stack Exchange API
- wrote unit test cases and got code coverage up to 100% for Stackoverflow module
